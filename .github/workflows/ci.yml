name: CI

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21.x', '1.22.x']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

      - name: Verify modules are tidy
        run: |
          go mod tidy
          git diff --exit-code -- go.mod go.sum
        shell: bash

      - name: Format check (gofmt)
        run: |
          fmtout=$(gofmt -s -l .)
          if [ -n "$fmtout" ]; then
            echo "Go files not formatted:" && echo "$fmtout"
            exit 1
          fi
        shell: bash

      - name: Vet
        run: go vet ./...

      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=3m

      - name: Build
        run: go build ./...

      - name: Test (race + coverage)
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold (70%)
        if: matrix.os == 'ubuntu-latest'
        run: |
          go tool cover -func=coverage.out | awk '/total:/ { gsub(/%/,"",$3); if ($3+0 < 70) { print "Coverage "$3"% is below threshold 70%"; exit 1 } else { print "Coverage "$3"%" } }'
        shell: bash

      - name: Upload coverage artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go }}-${{ matrix.os }}
          path: coverage.out

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          check-latest: true
          cache: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  dependency-review:
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
